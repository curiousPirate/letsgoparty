import './utils/polyfills';
import { Config } from './config';
import { FeatureFlags } from './feature_flags';
import { RuntimeName } from './runtimes/runtime';
interface ListedFunction {
    name: string;
    mainFile: string;
    runtime: RuntimeName;
    extension: string;
}
declare type ListedFunctionFile = ListedFunction & {
    srcFile: string;
};
interface ListFunctionsOptions {
    basePath?: string;
    config?: Config;
    featureFlags?: FeatureFlags;
}
declare const listFunctions: (relativeSrcFolders: string | string[], { featureFlags: inputFeatureFlags }?: {
    featureFlags?: FeatureFlags;
}) => Promise<ListedFunction[]>;
declare const listFunctionsFiles: (relativeSrcFolders: string | string[], { basePath, config, featureFlags: inputFeatureFlags }?: ListFunctionsOptions) => Promise<ListedFunctionFile[]>;
export { listFunctions, listFunctionsFiles };
export { zipFunction, zipFunctions } from './zip';
