"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipFunctions = exports.zipFunction = exports.listFunctionsFiles = exports.listFunctions = void 0;
const path_1 = require("path");
require("./utils/polyfills");
const feature_flags_1 = require("./feature_flags");
const runtimes_1 = require("./runtimes");
const fs_1 = require("./utils/fs");
// List all Netlify Functions main entry files for a specific directory
const listFunctions = function (relativeSrcFolders, { featureFlags: inputFeatureFlags } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const featureFlags = (0, feature_flags_1.getFlags)(inputFeatureFlags);
        const srcFolders = (0, fs_1.resolveFunctionsDirectories)(relativeSrcFolders);
        const paths = yield (0, fs_1.listFunctionsDirectories)(srcFolders);
        const functions = yield (0, runtimes_1.getFunctionsFromPaths)(paths, { featureFlags });
        const listedFunctions = [...functions.values()].map(getListedFunction);
        return listedFunctions;
    });
};
exports.listFunctions = listFunctions;
// List all Netlify Functions files for a specific directory
const listFunctionsFiles = function (relativeSrcFolders, { basePath, config, featureFlags: inputFeatureFlags } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const featureFlags = (0, feature_flags_1.getFlags)(inputFeatureFlags);
        const srcFolders = (0, fs_1.resolveFunctionsDirectories)(relativeSrcFolders);
        const paths = yield (0, fs_1.listFunctionsDirectories)(srcFolders);
        const functions = yield (0, runtimes_1.getFunctionsFromPaths)(paths, { config, featureFlags });
        const listedFunctionsFiles = yield Promise.all([...functions.values()].map((func) => getListedFunctionFiles(func, { basePath, featureFlags })));
        return listedFunctionsFiles.flat();
    });
};
exports.listFunctionsFiles = listFunctionsFiles;
const getListedFunction = function ({ runtime, name, mainFile, extension }) {
    return { name, mainFile, runtime: runtime.name, extension };
};
const getListedFunctionFiles = function (func, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const srcFiles = yield getSrcFiles(Object.assign(Object.assign({}, func), options));
        const { name, mainFile, runtime } = func;
        return srcFiles.map((srcFile) => ({ srcFile, name, mainFile, runtime: runtime.name, extension: (0, path_1.extname)(srcFile) }));
    });
};
const getSrcFiles = function (_a) {
    var { extension, runtime, srcPath } = _a, args = __rest(_a, ["extension", "runtime", "srcPath"]);
    return __awaiter(this, void 0, void 0, function* () {
        const { getSrcFiles: getRuntimeSrcFiles } = runtime;
        if (extension === '.zip' || typeof getRuntimeSrcFiles !== 'function') {
            return [srcPath];
        }
        return yield getRuntimeSrcFiles(Object.assign({ extension,
            runtime,
            srcPath }, args));
    });
};
var zip_1 = require("./zip");
Object.defineProperty(exports, "zipFunction", { enumerable: true, get: function () { return zip_1.zipFunction; } });
Object.defineProperty(exports, "zipFunctions", { enumerable: true, get: function () { return zip_1.zipFunctions; } });
//# sourceMappingURL=main.js.map