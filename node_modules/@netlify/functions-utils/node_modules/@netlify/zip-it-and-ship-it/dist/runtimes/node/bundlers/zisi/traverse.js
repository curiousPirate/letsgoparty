"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDependencyPathsForDependency = void 0;
const path_1 = require("path");
const non_nullable_1 = require("../../../../utils/non_nullable");
const module_1 = require("../../utils/module");
const nested_1 = require("./nested");
const published_1 = require("./published");
const resolve_1 = require("./resolve");
const side_files_1 = require("./side_files");
const EXCLUDED_MODULES = new Set(['aws-sdk']);
// When a file requires a module, we find its path inside `node_modules` and
// use all its published files. We also recurse on the module's dependencies.
const getDependencyPathsForDependency = function ({ dependency, basedir, state, packageJson, pluginsModulesPath, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const moduleName = (0, module_1.getModuleName)(dependency);
        // Happens when doing require("@scope") (not "@scope/name") or other oddities
        // Ignore those.
        if (moduleName === null) {
            return [];
        }
        try {
            return yield getDependenciesForModuleName({ moduleName, basedir, state, pluginsModulesPath });
        }
        catch (error) {
            return (0, nested_1.handleModuleNotFound)({ error, moduleName, packageJson });
        }
    });
};
exports.getDependencyPathsForDependency = getDependencyPathsForDependency;
const getDependenciesForModuleName = function ({ moduleName, basedir, state, pluginsModulesPath, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isExcludedModule(moduleName)) {
            return [];
        }
        // Find the Node.js module directory path
        const packagePath = yield (0, resolve_1.resolvePackage)(moduleName, [basedir, pluginsModulesPath].filter(non_nullable_1.nonNullable));
        if (packagePath === undefined) {
            return [];
        }
        const modulePath = (0, path_1.dirname)(packagePath);
        if (state.modulePaths.has(modulePath)) {
            return [];
        }
        state.moduleNames.add(moduleName);
        state.modulePaths.add(modulePath);
        // The path depends on the user's build, i.e. must be dynamic
        // eslint-disable-next-line import/no-dynamic-require, node/global-require, @typescript-eslint/no-var-requires
        const packageJson = require(packagePath);
        const [publishedFiles, sideFiles, depsPaths] = yield Promise.all([
            (0, published_1.getPublishedFiles)(modulePath),
            (0, side_files_1.getSideFiles)(modulePath, moduleName),
            getNestedModules({ modulePath, state, packageJson, pluginsModulesPath }),
        ]);
        return [...publishedFiles, ...sideFiles, ...depsPaths];
    });
};
const isExcludedModule = function (moduleName) {
    return EXCLUDED_MODULES.has(moduleName) || moduleName.startsWith('@types/');
};
const getNestedModules = function ({ modulePath, state, packageJson, pluginsModulesPath, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dependencies = (0, nested_1.getNestedDependencies)(packageJson);
        const depsPaths = yield Promise.all(dependencies.map((dependency) => getDependencyPathsForDependency({ dependency, basedir: modulePath, state, packageJson, pluginsModulesPath })));
        // TODO: switch to Array.flat() once we drop support for Node.js < 11.0.0
        // eslint-disable-next-line unicorn/prefer-spread
        return [].concat(...depsPaths);
    });
};
//# sourceMappingURL=traverse.js.map