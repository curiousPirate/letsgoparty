"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("../../utils/fs");
const non_nullable_1 = require("../../utils/non_nullable");
const zip_binary_1 = require("../../zip_binary");
const detect_runtime_1 = require("../detect_runtime");
const builder_1 = require("./builder");
const constants_1 = require("./constants");
const detectRustFunction = ({ fsCache, path }) => __awaiter(void 0, void 0, void 0, function* () {
    const stat = yield (0, fs_1.cachedLstat)(fsCache, path);
    if (!stat.isDirectory()) {
        return;
    }
    // @ts-expect-error TODO: The `makeCachedFunction` abstraction is causing the
    // return value of `readdir` to be incorrectly typed.
    const files = (yield (0, fs_1.cachedReaddir)(fsCache, path));
    const hasCargoManifest = files.includes(constants_1.MANIFEST_NAME);
    if (!hasCargoManifest) {
        return;
    }
    const mainFilePath = (0, path_1.join)(path, 'src', 'main.rs');
    try {
        const mainFile = yield (0, fs_1.cachedLstat)(fsCache, mainFilePath);
        if (mainFile.isFile()) {
            return mainFilePath;
        }
    }
    catch (_) {
        // no-op
    }
});
const findFunctionsInPaths = function ({ featureFlags, fsCache, paths, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const functions = yield Promise.all(paths.map((path) => __awaiter(this, void 0, void 0, function* () {
            const runtime = yield (0, detect_runtime_1.detectBinaryRuntime)({ fsCache, path });
            if (runtime === 'rs') {
                return processBinary({ fsCache, path });
            }
            if (featureFlags.buildRustSource !== true) {
                return;
            }
            const rustSourceFile = yield detectRustFunction({ fsCache, path });
            if (rustSourceFile) {
                return processSource({ fsCache, mainFile: rustSourceFile, path });
            }
        })));
        return functions.filter(non_nullable_1.nonNullable);
    });
};
const processBinary = ({ fsCache, path }) => __awaiter(void 0, void 0, void 0, function* () {
    const stat = (yield (0, fs_1.cachedLstat)(fsCache, path));
    const filename = (0, path_1.basename)(path);
    const extension = (0, path_1.extname)(path);
    const name = (0, path_1.basename)(path, extension);
    return {
        extension,
        filename,
        mainFile: path,
        name,
        srcDir: (0, path_1.dirname)(path),
        srcPath: path,
        stat,
    };
});
const processSource = ({ fsCache, mainFile, path, }) => __awaiter(void 0, void 0, void 0, function* () {
    // TODO: This `stat` value is not going to be used, but we need it to satisfy
    // the `FunctionSource` interface. We should revisit whether `stat` should be
    // part of that interface in the first place, or whether we could compute it
    // downstream when needed (maybe using the FS cache as an optimisation).
    const stat = (yield (0, fs_1.cachedLstat)(fsCache, path));
    const filename = (0, path_1.basename)(path);
    const extension = (0, path_1.extname)(path);
    const name = (0, path_1.basename)(path, extension);
    return {
        extension,
        filename,
        mainFile,
        name,
        srcDir: path,
        srcPath: path,
        stat,
    };
});
// The name of the binary inside the zip file must always be `bootstrap`
// because they include the Lambda runtime, and that's the name that AWS
// expects for those kind of functions.
const zipFunction = function ({ config, destFolder, filename, mainFile, runtime, srcDir, srcPath, stat, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const destPath = (0, path_1.join)(destFolder, `${filename}.zip`);
        const isSource = (0, path_1.extname)(mainFile) === '.rs';
        const zipOptions = {
            destPath,
            filename: 'bootstrap',
            runtime,
        };
        // If we're building from source, we first need to build the source and zip
        // the resulting binary. Otherwise, we're dealing with a binary so we zip it
        // directly.
        if (isSource) {
            const { path: binaryPath, stat: binaryStat } = yield (0, builder_1.build)({ config, name: filename, srcDir });
            yield (0, zip_binary_1.zipBinary)(Object.assign(Object.assign({}, zipOptions), { srcPath: binaryPath, stat: binaryStat }));
        }
        else {
            yield (0, zip_binary_1.zipBinary)(Object.assign(Object.assign({}, zipOptions), { srcPath, stat }));
        }
        return { config, path: destPath };
    });
};
const runtime = { findFunctionsInPaths, name: 'rs', zipFunction };
exports.default = runtime;
//# sourceMappingURL=index.js.map