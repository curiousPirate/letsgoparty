"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublishedFiles = void 0;
const util_1 = require("util");
const glob_1 = __importDefault(require("glob"));
const pGlob = (0, util_1.promisify)(glob_1.default);
// We use all the files published by the Node.js except some that are not needed
const getPublishedFiles = function (modulePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const ignore = getIgnoredFiles(modulePath);
        const publishedFiles = yield pGlob(`${modulePath}/**`, {
            ignore,
            nodir: true,
            absolute: true,
            dot: true,
        });
        return publishedFiles;
    });
};
exports.getPublishedFiles = getPublishedFiles;
const getIgnoredFiles = function (modulePath) {
    return IGNORED_FILES.map((ignoreFile) => `${modulePath}/${ignoreFile}`);
};
// To make the zip archive smaller, we remove those.
const IGNORED_FILES = [
    'node_modules/**',
    '.npmignore',
    'package-lock.json',
    'yarn.lock',
    '*.log',
    '*.lock',
    '*~',
    '*.map',
    '*.ts',
    '*.patch',
];
//# sourceMappingURL=published.js.map