"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExternalAndIgnoredModulesFromSpecialCases = void 0;
const package_json_1 = require("../../utils/package_json");
const EXTERNAL_MODULES = ['@prisma/client'];
const IGNORED_MODULES = ['aws-sdk'];
const getPackageJsonIfAvailable = (srcDir) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const packageJson = yield (0, package_json_1.getPackageJson)(srcDir);
        return packageJson;
    }
    catch (_) {
        return {};
    }
});
const getModulesForNextJs = ({ dependencies, devDependencies }) => {
    const allDependencies = Object.assign(Object.assign({}, dependencies), devDependencies);
    const externalModules = allDependencies.next ? ['critters', 'nanoid'] : [];
    const ignoredModules = [];
    return {
        externalModules,
        ignoredModules,
    };
};
const getExternalAndIgnoredModulesFromSpecialCases = ({ srcDir }) => __awaiter(void 0, void 0, void 0, function* () {
    const { dependencies = {}, devDependencies = {} } = yield getPackageJsonIfAvailable(srcDir);
    const { externalModules: nextJsExternalModules, ignoredModules: nextJsIgnoredModules } = getModulesForNextJs({
        dependencies,
        devDependencies,
    });
    const externalModules = [...EXTERNAL_MODULES, ...nextJsExternalModules];
    const ignoredModules = [...IGNORED_MODULES, ...nextJsIgnoredModules];
    return {
        externalModules,
        ignoredModules,
    };
});
exports.getExternalAndIgnoredModulesFromSpecialCases = getExternalAndIgnoredModulesFromSpecialCases;
//# sourceMappingURL=special_cases.js.map