"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipNodeJs = void 0;
/* eslint-disable max-lines */
const buffer_1 = require("buffer");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = require("path");
const util_1 = require("util");
const cp_file_1 = __importDefault(require("cp-file"));
const del_1 = __importDefault(require("del"));
const make_dir_1 = __importDefault(require("make-dir"));
const p_map_1 = __importDefault(require("p-map"));
const unixify_1 = __importDefault(require("unixify"));
const archive_1 = require("../../../archive");
const fs_2 = require("../../../utils/fs");
const pStat = (0, util_1.promisify)(fs_1.default.stat);
const pWriteFile = (0, util_1.promisify)(fs_1.default.writeFile);
// Taken from https://www.npmjs.com/package/cpy.
const COPY_FILE_CONCURRENCY = os_1.default.cpus().length === 0 ? 2 : os_1.default.cpus().length * 2;
// Sub-directory to place all user-defined files  (i.e. everything other than
// the entry file generated by zip-it-and-ship-it).
const DEFAULT_USER_SUBDIRECTORY = 'src';
const createDirectory = function ({ aliases = new Map(), basePath, destFolder, extension, filename, mainFile, rewrites = new Map(), srcFiles, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { contents: entryContents, filename: entryFilename } = getEntryFile({
            commonPrefix: basePath,
            filename,
            mainFile,
            userNamespace: DEFAULT_USER_SUBDIRECTORY,
        });
        const functionFolder = (0, path_1.join)(destFolder, (0, path_1.basename)(filename, extension));
        // Deleting the functions directory in case it exists before creating it.
        yield (0, del_1.default)(functionFolder, { force: true });
        yield (0, make_dir_1.default)(functionFolder);
        // Writing entry file.
        yield pWriteFile((0, path_1.join)(functionFolder, entryFilename), entryContents);
        // Copying source files.
        yield (0, p_map_1.default)(srcFiles, (srcFile) => {
            const destPath = aliases.get(srcFile) || srcFile;
            const normalizedDestPath = normalizeFilePath({
                commonPrefix: basePath,
                path: destPath,
                userNamespace: DEFAULT_USER_SUBDIRECTORY,
            });
            const absoluteDestPath = (0, path_1.join)(functionFolder, normalizedDestPath);
            if (rewrites.has(srcFile)) {
                return (0, fs_2.mkdirAndWriteFile)(absoluteDestPath, rewrites.get(srcFile));
            }
            return (0, cp_file_1.default)(srcFile, absoluteDestPath);
        }, { concurrency: COPY_FILE_CONCURRENCY });
        return functionFolder;
    });
};
const createZipArchive = function ({ aliases, basePath, destFolder, extension, filename, mainFile, rewrites, srcFiles, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const destPath = (0, path_1.join)(destFolder, `${(0, path_1.basename)(filename, extension)}.zip`);
        const { archive, output } = (0, archive_1.startZip)(destPath);
        const entryFilename = `${(0, path_1.basename)(filename, extension)}.js`;
        const entryFilePath = (0, path_1.resolve)(basePath, entryFilename);
        // We don't need an entry file if it would end up with the same path as the
        // function's main file.
        const needsEntryFile = entryFilePath !== mainFile;
        // There is a naming conflict with the entry file if one of the supporting
        // files (i.e. not the main file) has the path that the entry file needs to
        // take.
        const hasEntryFileConflict = srcFiles.some((srcFile) => srcFile === entryFilePath && srcFile !== mainFile);
        // If there is a naming conflict, we move all user files (everything other
        // than the entry file) to its own sub-directory.
        const userNamespace = hasEntryFileConflict ? DEFAULT_USER_SUBDIRECTORY : '';
        if (needsEntryFile) {
            const entryFile = getEntryFile({ commonPrefix: basePath, filename, mainFile, userNamespace });
            addEntryFileToZip(archive, entryFile);
        }
        const srcFilesInfos = yield Promise.all(srcFiles.map(addStat));
        // We ensure this is not async, so that the archive's checksum is
        // deterministic. Otherwise it depends on the order the files were added.
        srcFilesInfos.forEach(({ srcFile, stat }) => {
            zipJsFile({
                aliases,
                archive,
                commonPrefix: basePath,
                rewrites,
                srcFile,
                stat,
                userNamespace,
            });
        });
        yield (0, archive_1.endZip)(archive, output);
        return destPath;
    });
};
const zipNodeJs = function (_a) {
    var { archiveFormat } = _a, options = __rest(_a, ["archiveFormat"]);
    if (archiveFormat === 'zip') {
        return createZipArchive(options);
    }
    return createDirectory(options);
};
exports.zipNodeJs = zipNodeJs;
const addEntryFileToZip = function (archive, { contents, filename }) {
    const contentBuffer = buffer_1.Buffer.from(contents);
    (0, archive_1.addZipContent)(archive, contentBuffer, filename);
};
const addStat = function (srcFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const stat = yield pStat(srcFile);
        return { srcFile, stat };
    });
};
const getEntryFile = ({ commonPrefix, filename, mainFile, userNamespace, }) => {
    const mainPath = normalizeFilePath({ commonPrefix, path: mainFile, userNamespace });
    const extension = (0, path_1.extname)(filename);
    const entryFilename = `${(0, path_1.basename)(filename, extension)}.js`;
    return {
        contents: `module.exports = require('.${mainPath.startsWith('/') ? mainPath : `/${mainPath}`}')`,
        filename: entryFilename,
    };
};
const zipJsFile = function ({ aliases = new Map(), archive, commonPrefix, rewrites = new Map(), stat, srcFile, userNamespace, }) {
    const destPath = aliases.get(srcFile) || srcFile;
    const normalizedDestPath = normalizeFilePath({ commonPrefix, path: destPath, userNamespace });
    if (rewrites.has(srcFile)) {
        (0, archive_1.addZipContent)(archive, rewrites.get(srcFile), normalizedDestPath);
    }
    else {
        (0, archive_1.addZipFile)(archive, srcFile, normalizedDestPath, stat);
    }
};
// `adm-zip` and `require()` expect Unix paths.
// We remove the common path prefix.
// With files on different Windows drives, we remove the drive letter.
const normalizeFilePath = function ({ commonPrefix, path, userNamespace, }) {
    const userNamespacePathSegment = userNamespace ? `${userNamespace}${path_1.sep}` : '';
    const pathA = (0, path_1.normalize)(path);
    const pathB = pathA.replace(commonPrefix, userNamespacePathSegment);
    const pathC = (0, unixify_1.default)(pathB);
    return pathC;
};
/* eslint-enable max-lines */
//# sourceMappingURL=zip.js.map