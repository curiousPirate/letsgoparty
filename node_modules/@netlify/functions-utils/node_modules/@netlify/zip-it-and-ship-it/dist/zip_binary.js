"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipBinary = void 0;
const archive_1 = require("./archive");
// Zip a binary function file
const zipBinary = function ({ destPath, filename, runtime, srcPath, stat, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { archive, output } = (0, archive_1.startZip)(destPath);
        (0, archive_1.addZipFile)(archive, srcPath, filename, stat);
        (0, archive_1.addZipContent)(archive, JSON.stringify({ runtime: runtime.name }), 'netlify-toolchain');
        yield (0, archive_1.endZip)(archive, output);
    });
};
exports.zipBinary = zipBinary;
//# sourceMappingURL=zip_binary.js.map